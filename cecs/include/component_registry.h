// This file has been autogenerated using component_parser.
#ifndef COMPONENT_REGISTRY_H
#define COMPONENT_REGISTRY_H

// DENSE
// LIMIT: 24
typedef struct {
	int x, y;
} Position;

// DENSE
// LIMIT: 0
typedef struct {
	int hp;
	int stamina;
	int strength;
} Stats;

// DENSE
// LIMIT: 0
typedef struct {
	char glyph;
	int fg;
	int bg;
} Renderable;

// FLAG
// LIMIT: 0
typedef struct {
} Player;

// SPARSE
// LIMIT: 24
typedef struct {
	int turns;
	int damage;
} Poisoned;

typedef enum {
	COMPONENT_POSITION,
	COMPONENT_STATS,
	COMPONENT_RENDERABLE,
	COMPONENT_PLAYER,
	COMPONENT_POISONED,
	COMPONENT_SIZE
} ComponentType;

#define COMPONENTS\
 DENSE(Position, position, COMPONENT_POSITION)\
 DENSE(Stats, stats, COMPONENT_STATS)\
 DENSE(Renderable, renderable, COMPONENT_RENDERABLE)\
 FLAG(Player, player, COMPONENT_PLAYER)\
 SPARSE(Poisoned, poisoned, COMPONENT_POISONED, 24)

union entity;
struct world;

#define entity_get_position(world, entity)\
  entity_is_alive(world, entity) ? &world->components.position[entity.as.index] : &world->components.position[0]
Position* entity_add_position(struct world* _world, union entity _entity, Position position);
void entity_remove_position(struct world* _world, union entity _entity);

#define entity_get_stats(world, entity)\
  entity_is_alive(world, entity) ? &world->components.stats[entity.as.index] : &world->components.stats[0]
Stats* entity_add_stats(struct world* _world, union entity _entity, Stats stats);
void entity_remove_stats(struct world* _world, union entity _entity);

#define entity_get_renderable(world, entity)\
  entity_is_alive(world, entity) ? &world->components.renderable[entity.as.index] : &world->components.renderable[0]
Renderable* entity_add_renderable(struct world* _world, union entity _entity, Renderable renderable);
void entity_remove_renderable(struct world* _world, union entity _entity);

void entity_add_player(struct world* _world, union entity _entity);
void entity_remove_player(struct world* _world, union entity _entity);

#define entity_get_poisoned(world, entity)\
  entity_is_alive(world, entity) ? &world->components.poisoned[entity.as.index] : &world->components.poisoned[0]
Poisoned* entity_add_poisoned(struct world* _world, union entity _entity, Poisoned poisoned);
void entity_remove_poisoned(struct world* _world, union entity _entity);

#endif // COMPONENT_REGISTRY_H
