// This file is autogenerated.
#ifndef META_H
#define META_H

#include "test.h"
typedef enum {
  METATYPE_Unknown,
  METATYPE_Player,
  METATYPE_Collision,
  METATYPE_Rect,
  METATYPE_Vector2,
  METATYPE_Sprite,
  METATYPE_int,
  METATYPE_char,
} MetaType;

typedef struct {
  MetaType type;
  char* field_name;
  int offset;
} MemberDefinition;

#define offset_of(Type, field) ((int)&((( Type *)0) -> field))


int test = offset_of(Collision, rect);

MemberDefinition members_Player[] = {
  { METATYPE_Sprite, "sprite", ((int)&(((struct Player*)0)->sprite)) },
  { METATYPE_Vector2, "position", ((int)&(((struct Player*)0)->position)) },
  { METATYPE_Collision, "collision", ((int)&(((struct Player*)0)->collision)) },
  { METATYPE_char, "name", ((int)&(((struct Player*)0)->name)) },
};
MemberDefinition members_Collision[] = {
  { METATYPE_int, "id", ((int)&(((Collision*)0)->id)) },
  { METATYPE_Rect, "rect", ((int)&(((Collision*)0)->rect)) },
};
MemberDefinition members_Rect[] = {
  { METATYPE_Vector2, "position", ((int)&(((Rect*)0)->position)) },
  { METATYPE_Vector2, "size", ((int)&(((Rect*)0)->size)) },
};
MemberDefinition members_Sprite[] = {
  { METATYPE_char, "asset", ((int)&(((Sprite*)0)->asset)) },
  { METATYPE_int, "r", ((int)&(((Sprite*)0)->r)) },
  { METATYPE_int, "g", ((int)&(((Sprite*)0)->g)) },
  { METATYPE_int, "b", ((int)&(((Sprite*)0)->b)) },
};
#define INCLUDE_METATYPE_CASES \
  X(METATYPE_Player, members_Player) \
  X(METATYPE_Collision, members_Collision) \
  X(METATYPE_Rect, members_Rect) \
  X(METATYPE_Sprite, members_Sprite)

#endif // META_H_